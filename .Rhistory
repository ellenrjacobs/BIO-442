geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Female Calves - Raw") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(FEMALE_CALF_pvals$P.value)), color = "blue")
#male juveniles
MALE_JUV_Vals = subset(EdgeWeight_Raw, Age.Sex.Class== "MALE_JUVENILE") #just for one class
MALE_JUV_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(MALE_JUV_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
MALE_JUV_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = MALE_JUV_Vals[MALE_JUV_Vals$Mom == Moms[i] & MALE_JUV_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_JUV_ValsUnique = rbind(MALE_JUV_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = MALE_JUV_Vals[MALE_JUV_Vals$Mom == Moms[i] & MALE_JUV_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_JUV_ValsUnique = rbind(MALE_JUV_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(MALE_JUV_ValsUnique[MALE_JUV_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(MALE_JUV_ValsUnique[MALE_JUV_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
MALE_JUV_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=MALE_JUV_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Male Juveniles - Raw") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(MALE_JUV_pvals$P.value)), color = "blue")
#female juveniles
FEMALE_JUV_Vals = subset(EdgeWeight_Raw, Age.Sex.Class== "FEMALE_JUVENILE") #just for one class
FEMALE_JUV_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(FEMALE_JUV_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
FEMALE_JUV_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = FEMALE_JUV_Vals[FEMALE_JUV_Vals$Mom == Moms[i] & FEMALE_JUV_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_JUV_ValsUnique = rbind(FEMALE_JUV_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = FEMALE_JUV_Vals[FEMALE_JUV_Vals$Mom == Moms[i] & FEMALE_JUV_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_JUV_ValsUnique = rbind(FEMALE_JUV_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(FEMALE_JUV_ValsUnique[FEMALE_JUV_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(FEMALE_JUV_ValsUnique[FEMALE_JUV_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
FEMALE_JUV_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=FEMALE_JUV_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Female Juveniles - Raw") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(FEMALE_JUV_pvals$P.value)), color = "blue")
#male adults
MALE_ADULT_Vals = subset(EdgeWeight_Raw, Age.Sex.Class== "MALE_ADULT") #just for one class
MALE_ADULT_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(MALE_ADULT_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
MALE_ADULT_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = MALE_ADULT_Vals[MALE_ADULT_Vals$Mom == Moms[i] & MALE_ADULT_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_ADULT_ValsUnique = rbind(MALE_ADULT_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = MALE_ADULT_Vals[MALE_ADULT_Vals$Mom == Moms[i] & MALE_ADULT_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_ADULT_ValsUnique = rbind(MALE_ADULT_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(MALE_ADULT_ValsUnique[MALE_ADULT_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(MALE_ADULT_ValsUnique[MALE_ADULT_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
MALE_ADULT_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=MALE_ADULT_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Male Adults - Raw") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(MALE_ADULT_pvals$P.value)), color = "blue")
#female adults
FEMALE_ADULT_Vals = subset(EdgeWeight_Raw, Age.Sex.Class== "FEMALE_ADULT") #just for one class
FEMALE_ADULT_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(FEMALE_ADULT_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
FEMALE_ADULT_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = FEMALE_ADULT_Vals[FEMALE_ADULT_Vals$Mom == Moms[i] & FEMALE_ADULT_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_ADULT_ValsUnique = rbind(FEMALE_ADULT_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = FEMALE_ADULT_Vals[FEMALE_ADULT_Vals$Mom == Moms[i] & FEMALE_ADULT_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_ADULT_ValsUnique = rbind(FEMALE_ADULT_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(FEMALE_ADULT_ValsUnique[FEMALE_ADULT_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(FEMALE_ADULT_ValsUnique[FEMALE_ADULT_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
FEMALE_ADULT_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=FEMALE_ADULT_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Female Adults - Raw") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(FEMALE_ADULT_pvals$P.value)), color = "blue")
#norm
Moms = unique(EdgeWeight_Norm$Mom)
#male calves
MALE_CALF_Vals = subset(EdgeWeight_Norm, Age.Sex.Class== "MALE_CALF") #just for one class
MALE_CALF_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(MALE_CALF_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
MALE_CALF_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = MALE_CALF_Vals[MALE_CALF_Vals$Mom == Moms[i] & MALE_CALF_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_CALF_ValsUnique = rbind(MALE_CALF_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = MALE_CALF_Vals[MALE_CALF_Vals$Mom == Moms[i] & MALE_CALF_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_CALF_ValsUnique = rbind(MALE_CALF_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(MALE_CALF_ValsUnique[MALE_CALF_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(MALE_CALF_ValsUnique[MALE_CALF_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
MALE_CALF_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=MALE_CALF_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Male Calves - Percentage") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(MALE_CALF_pvals$P.value)), color = "blue")
#female calves
FEMALE_CALF_Vals = subset(EdgeWeight_Norm, Age.Sex.Class== "FEMALE_CALF") #just for one class
FEMALE_CALF_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(FEMALE_CALF_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
FEMALE_CALF_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = FEMALE_CALF_Vals[FEMALE_CALF_Vals$Mom == Moms[i] & FEMALE_CALF_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_CALF_ValsUnique = rbind(FEMALE_CALF_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = FEMALE_CALF_Vals[FEMALE_CALF_Vals$Mom == Moms[i] & FEMALE_CALF_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_CALF_ValsUnique = rbind(FEMALE_CALF_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(FEMALE_CALF_ValsUnique[FEMALE_CALF_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(FEMALE_CALF_ValsUnique[FEMALE_CALF_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
FEMALE_CALF_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=FEMALE_CALF_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Female Calves - Percentage") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(FEMALE_CALF_pvals$P.value)), color = "blue")
#male juveniles
MALE_JUV_Vals = subset(EdgeWeight_Norm, Age.Sex.Class== "MALE_JUVENILE") #just for one class
MALE_JUV_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(MALE_JUV_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
MALE_JUV_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = MALE_JUV_Vals[MALE_JUV_Vals$Mom == Moms[i] & MALE_JUV_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_JUV_ValsUnique = rbind(MALE_JUV_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = MALE_JUV_Vals[MALE_JUV_Vals$Mom == Moms[i] & MALE_JUV_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_JUV_ValsUnique = rbind(MALE_JUV_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(MALE_JUV_ValsUnique[MALE_JUV_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(MALE_JUV_ValsUnique[MALE_JUV_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
MALE_JUV_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=MALE_JUV_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Male Juveniles - Percentage") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(MALE_JUV_pvals$P.value)), color = "blue")
#female juveniles
FEMALE_JUV_Vals = subset(EdgeWeight_Norm, Age.Sex.Class== "FEMALE_JUVENILE") #just for one class
FEMALE_JUV_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(FEMALE_JUV_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
FEMALE_JUV_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = FEMALE_JUV_Vals[FEMALE_JUV_Vals$Mom == Moms[i] & FEMALE_JUV_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_JUV_ValsUnique = rbind(FEMALE_JUV_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = FEMALE_JUV_Vals[FEMALE_JUV_Vals$Mom == Moms[i] & FEMALE_JUV_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_JUV_ValsUnique = rbind(FEMALE_JUV_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(FEMALE_JUV_ValsUnique[FEMALE_JUV_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(FEMALE_JUV_ValsUnique[FEMALE_JUV_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
FEMALE_JUV_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=FEMALE_JUV_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Female Juveniles - Percentage") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(FEMALE_JUV_pvals$P.value)), color = "blue")
#male adults
MALE_ADULT_Vals = subset(EdgeWeight_Norm, Age.Sex.Class== "MALE_ADULT") #just for one class
MALE_ADULT_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(MALE_ADULT_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
MALE_ADULT_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = MALE_ADULT_Vals[MALE_ADULT_Vals$Mom == Moms[i] & MALE_ADULT_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_ADULT_ValsUnique = rbind(MALE_ADULT_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = MALE_ADULT_Vals[MALE_ADULT_Vals$Mom == Moms[i] & MALE_ADULT_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
MALE_ADULT_ValsUnique = rbind(MALE_ADULT_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(MALE_ADULT_ValsUnique[MALE_ADULT_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(MALE_ADULT_ValsUnique[MALE_ADULT_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
MALE_ADULT_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=MALE_ADULT_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Male Adults - Percentage") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(MALE_ADULT_pvals$P.value)), color = "blue")
#female adults
FEMALE_ADULT_Vals = subset(EdgeWeight_Norm, Age.Sex.Class== "FEMALE_ADULT") #just for one class
FEMALE_ADULT_pvals = data.frame(matrix(data=0, nrow = 100, ncol = 1)) #store pvalues
colnames(FEMALE_ADULT_pvals) = ("P.value")
#loop choosing a calf and doing the perm test 100 times
for(j in 1:100)
{
FEMALE_ADULT_ValsUnique = data.frame()
#now we randomly choose one if there's multiple calves of one sex
for(i in 1:length(Moms))
{
#choose her male
HerBabies = FEMALE_ADULT_Vals[FEMALE_ADULT_Vals$Mom == Moms[i] & FEMALE_ADULT_Vals$CalfSex == "MALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_ADULT_ValsUnique = rbind(FEMALE_ADULT_ValsUnique, TheBabyToChoose)
#choose her female
HerBabies = FEMALE_ADULT_Vals[FEMALE_ADULT_Vals$Mom == Moms[i] & FEMALE_ADULT_Vals$CalfSex == "FEMALE",]
TheBabyToChoose = HerBabies[sample(nrow(HerBabies),1),]
FEMALE_ADULT_ValsUnique = rbind(FEMALE_ADULT_ValsUnique, TheBabyToChoose)
}
Males = as.numeric(as.matrix(FEMALE_ADULT_ValsUnique[FEMALE_ADULT_ValsUnique$CalfSex == "MALE",5])) #change the format for test
Females = as.numeric(as.matrix(FEMALE_ADULT_ValsUnique[FEMALE_ADULT_ValsUnique$CalfSex == "FEMALE",5]))
Males = Males[complete.cases(Males)] #get rid of NA values
Females = Females[complete.cases(Females)]
#do the test
perm_test = permTS(x = Males, y = Females)
FEMALE_ADULT_pvals[j,1] = perm_test$p.value #add the p-value to the list
}
ggplot(data=FEMALE_ADULT_pvals, aes(x=P.value)) +
geom_histogram(binwidth=0.02) +
xlab("p-value from Paired t-test") +
ylab("Incidence") +
ggtitle("p-values of Paired t-test of Female Adults - Percentage") +
geom_vline(aes(xintercept=0.05), colour="red") +
geom_vline(aes(xintercept=mean(FEMALE_ADULT_pvals$P.value)), color = "blue")
#raw
ggplot(data = Summary_Raw, aes(x=Age.Sex.Class, y=Strength, fill=CalfSex)) +
geom_bar(stat="identity", position = "dodge", width = 0.8) +
geom_errorbar(aes(ymin = Strength - SE, ymax = Strength + SE), width=0.2, position = position_dodge(0.8)) +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
labs(title = "Average Sum of Associations by Age-Sex Class - Raw Strengths", y = "Association Strength", x = "Age-Sex Class" )
#norm
ggplot(data = Summary_Norm, aes(x=Age.Sex.Class, y=Strength, fill=CalfSex)) +
geom_bar(stat="identity", position = "dodge", width = 0.8) +
geom_errorbar(aes(ymin = Strength - SE, ymax = Strength + SE), width=0.2, position = position_dodge(0.8)) +
theme(axis.text.x = element_text(angle = 45, hjust=1)) +
labs(title = "Average Sum of Associations by Age-Sex Class - Percentage of Total Strength", y = "Percent of Total Association Strength", x = "Age-Sex Class" )
degree.model = lmer(Degree ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
summary(degree.model)
print(degree.model)
degree.model = lmer(Degree ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
reduceddegree.model = lmer(Degree ~ SurveyNumber + (1|Mom), data=T.NetworkParams) #null model
degree_anova = anova(degree.model,reduceddegree.model)
print(degree_anova)
degree.model = lmer(Degree ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
reduceddegree.model = lmer(Degree ~ 1+ SurveyNumber + (1|Mom), data=T.NetworkParams) #null model
degree_anova = anova(degree.model,reduceddegree.model)
print(degree_anova)
betweenness.model = lmer(Betweenness ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
reducedbetweenness.model = lmer(Betweenness ~ 1+ SurveyNumber + (1|Mom), data=T.NetworkParams) #null model
betweenness_anova = anova(betweenness.model,reducedbetweenness.model)
print(betweenness_anova)
betweenness.model = lmer(Betweenness ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
print(betweenness.model)
reducedbetweenness.model = lmer(Betweenness ~ 1+ SurveyNumber + (1|Mom), data=T.NetworkParams) #null model
print(reducedbetweenness.model)
betweenness_anova = anova(betweenness.model,reducedbetweenness.model)
print(betweenness_anova)
degree.model = lmer(Degree ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
reduceddegree.model = lmer(Degree ~ SurveyNumber + (1|Mom), data=T.NetworkParams) #null model
degree_anova = anova(degree.model,reduceddegree.model)
print(degree_anova)
betweenness.model = lmer(Betweenness ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
reducedbetweenness.model = lmer(Betweenness ~ SurveyNumber + (1|Mom), data=T.NetworkParams) #null model
betweenness_anova = anova(betweenness.model,reducedbetweenness.model)
print(betweenness_anova)
ec.model = lmer(EigCentrality ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
reducedec.model = lmer(EigCentrality ~ SurveyNumber + (1|Mom), data=T.NetworkParams)
ec_anova = anova(ec.model,reducedec.model)
print(ec_anova)
strength.model = lmer(Strength ~ Sex + SurveyNumber + (1|Mom), data=T.NetworkParams)
reducedstrength.model = lmer(Strength ~ SurveyNumber + (1|Mom), data=T.NetworkParams)
strength_anova = anova(strength.model,reducedstrength.model)
print(strength_anova)
clu.model = lmer(Clustering ~ Sex + SurveyNumber+ (1|Mom), data=T.NetworkParams)
reducedclu.model = lmer(Clustering ~ SurveyNumber + (1|Mom), data=T.NetworkParams)
clu_anova = anova(clu.model,reducedclu.model)
print(clu_anova)
library(readr) #this is a package but still counts as base R, right?
#changed the degree symbol to a % manually because it was doing very weird and unpredictable things
#first, read in the data from the CSV files
audubon_data <- read_csv("~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/audubon_data.csv")
gw_data <- read_csv("~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/gw_data.csv")
nat_geo_data <- read_csv("~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/nat_geo_data.csv")
#clean audubon data
audubon_data = na.omit(audubon_data) #get rid of incomplete observations
#dates
audubon_data$Date = as.Date(audubon_data$Date, format = "%m/%d/%y") #put it into date format
audubon_data = audubon_data[(audubon_data$Date > "2019-12-31"),] #filter dates to be only 2020
#longitude - just delete the W
audubon_data$Longitude = gsub("W","-",audubon_data$Longitude) #west = negative, in decimal degrees
#latitude - just delete the N
audubon_data$Latitude = gsub("N","",audubon_data$Latitude) #north = positive, in decimal degrees
#keep only transects
audubon_data = audubon_data[(grep("transect",audubon_data$Survey_Type,ignore.case = TRUE)),] #keep only things with transect in it
audubon_data$Survey_Type = "transect" #make it uniform
#add a column for remembering it's from audubon
audubon_data$DataID = "audubon_data"
#clean gw data
gw_data = na.omit(gw_data) #get rid of incomplete observations
#dates
gw_data$Date = as.Date(gw_data$Date, format = "%d-%b-%y") #the correct date format
gw_data = gw_data[(gw_data$Date > "2019-12-31"),] #filter to only be 2020
#longitude - get rid of the W, then add first two char + (4 to end)/60 * -1
gw_data$Longitude = gsub("'W","",gw_data$Longitude) #get rid of the 'W
gw_data$Longitude = as.numeric(substr(gw_data$Longitude, 1, 2)) + #the first two numbers, as numbers
(as.numeric(substr(gw_data$Longitude, 4, nchar(gw_data$Longitude)))/60) #the minutes and seconds, /60
gw_data$Longitude = gw_data$Longitude*-1
#latitude - get rid of the N, then add first two char + (4 to end)/60 * -1
gw_data$Latitude = gsub("'N","",gw_data$Latitude) #get rid of the 'N
gw_data$Latitude = as.numeric(substr(gw_data$Latitude, 1, 2)) + #the first two numbers, as numbers
(as.numeric(substr(gw_data$Latitude, 4, nchar(gw_data$Latitude)))/60) #the minutes and seconds, /60
#keep only transects
gw_data = gw_data[(grep("transect",gw_data$Survey_Type,ignore.case = TRUE)),] #keep only things with transect in it
gw_data$Survey_Type = "transect" #make it uniform
#add a column for remembering it's from gw
gw_data$DataID = "gw_data"
#clean nat geo data
nat_geo_data = na.omit(nat_geo_data) #get rid of incomplete observations
#dates
nat_geo_data$Date = as.Date(nat_geo_data$Date, format = "%Y-%m-%d") #the correct date format
nat_geo_data = nat_geo_data[(nat_geo_data$Date > "2019-12-31"),] #filter to only be 2020
#latitude and longitude appear to be okay already
#keep only transects
nat_geo_data = nat_geo_data[(grep("transect",nat_geo_data$Survey_Type,ignore.case = TRUE)),] #keep only things with transect in it
nat_geo_data$Survey_Type = "transect" #make it uniform
#add a column for remembering it's from nat geo
nat_geo_data$DataID = "nat_geo_data"
#now put it all together
all_data = rbind(audubon_data, gw_data, nat_geo_data)
write.csv(all_data, "~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/my_clean_data.csv")
audubon_data <- read_csv("~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/audubon_data.csv")
audubon_data = na.omit(audubon_data) #get rid of incomplete observations
audubon_data$Date = as.Date(audubon_data$Date, format = "%m/%d/%y") #put it into date format
audubon_data = audubon_data[(audubon_data$Date > "2019-12-31"),] #filter dates to be only 2020
audubon_data$Longitude = gsub("W","-",audubon_data$Longitude) #west = negative, in decimal degrees
audubon_data$Latitude = gsub("N","",audubon_data$Latitude) #north = positive, in decimal degrees
audubon_data = audubon_data[(grep("transect",audubon_data$Survey_Type,ignore.case = TRUE)),] #keep only things with transect in it
audubon_data <- read_csv("~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/audubon_data.csv")
audubon_data = na.omit(audubon_data) #get rid of incomplete observations
audubon_data$Date = as.Date(audubon_data$Date, format = "%m/%d/%y") #put it into date format
audubon_data = audubon_data[(audubon_data$Date > "2019-12-31"),] #filter dates to be only 2020
audubon_data$Longitude = gsub("W","-",audubon_data$Longitude) #west = negative, in decimal degrees
audubon_data$Latitude = gsub("N","",audubon_data$Latitude) #north = positive, in decimal degrees
table(audubon_data)
audubon_data = audubon_data[(grep("transect",audubon_data$Survey_Type,ignore.case = TRUE)),] #keep only things with transect in it
audubon_data$Survey_Type = "transect" #make it uniform
audubon_data$DataID = "audubon_data"
library(sp)
library(rgdal)
clean_data <- read.csv("~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/my_clean_data.csv")
plotting_data <- SpatialPoints(clean_data[, c("Longitude", "Latitude")])
dc <- readOGR("~/Desktop/Ellen/Georgetown courses/BIO-442/Assignment 1/Neighborhood_Clusters-shp", "Neighborhood_Clusters")
par(mar = c(1, 1, 1, 1))
plot(
dc,
col = "darkgrey",
border = "white",
main = "District of Columbia Bird Sightings"
)
plot(dc[46, ],
add = TRUE,
col = "#718BAE80",
border = "white")
plot(plotting_data,
add = TRUE,
pch = 16,
cex = 0.25)
document()
library(devtools)
library(roxygen2)
setwd("~/Desktop/Ellen/Georgetown courses/BIO-442/")
create("Bio442",
rstudio = FALSE,
roxygen = TRUE,
open = FALSE)
document()
setwd("Bio442")
document()
